package com.multiThreadingConcept;


class Counter implements  Runnable{

    private int c = 0;
    public void increment(){
        try{
            Thread.sleep(10);
        }catch (InterruptedException e){
            e.printStackTrace();
        }
        c++;
    }

    public void decrement(){
        c--;
    }

    public int getValue(){
        return c;
    }

    @Override
    public void run() {
      synchronized (this){
          this.increment();
          System.out.println("Value for Thread after increment "+ Thread.currentThread().getName() + " "+ this.getValue());

          //decrement

          this.decrement();
          System.out.println("Value for a Thread at last : "+ Thread.currentThread().getName()+ " "+ this.getValue());
      }
    }
}



public class RaceConditionDemo {
    public static void main(String[] args) {
        Counter counter = new Counter();

        Thread t1 = new Thread(counter,"Thread-1");
        Thread t2 = new Thread(counter, "Thread-2");
        Thread t3 = new Thread(counter, "Thread-3");
        t1.start();
        t2.start();
        t3.start();
    }
}
